package org.tbk.spring.lnurl.security.wallet;

import fr.acinq.bitcoin.ByteVector64;
import fr.acinq.bitcoin.Crypto;
import fr.acinq.bitcoin.PublicKey;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.AuthenticationServiceException;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UserDetails;
import org.tbk.lnurl.auth.*;
import org.tbk.spring.lnurl.security.AbstractTokenAuthenticationProvider;
import org.tbk.spring.lnurl.security.LnurlAuthenticationException;
import org.tbk.spring.lnurl.security.userdetails.LnurlAuthUserPairingService;

@RequiredArgsConstructor
public class LnurlAuthWalletAuthenticationProvider extends AbstractTokenAuthenticationProvider {

    @NonNull
    private final K1Manager k1Manager;

    @NonNull
    private final LnurlAuthUserPairingService lnurlAuthUserPairingService;

    @Override
    public boolean supports(Class<?> authentication) {
        return LnurlAuthWalletToken.class.isAssignableFrom(authentication);
    }

    @Override
    protected UserDetails retrieveUser(Authentication authentication) throws AuthenticationException {
        LnurlAuthWalletToken token = (LnurlAuthWalletToken) authentication;

        if (token.isAuthenticated()) {
            throw new LnurlAuthenticationException("Already authenticated.");
        }

        SignedLnurlAuth auth = token.getAuth();
        K1 k1 = auth.getK1();

        boolean validK1 = k1Manager.isValid(k1);
        if (!validK1) {
            throw new BadCredentialsException("k1 value has either expired or was not generated by this service.");
        }

        boolean loginVerified = verifyLogin(auth);
        if (!loginVerified) {
            throw new BadCredentialsException("k1 and signature could not be verified.");
        }

        UserDetails userDetails;
        try {
            userDetails = lnurlAuthUserPairingService.pairUserWithK1(auth);
        } catch (Exception e) {
            throw new AuthenticationServiceException("Could not pair k1 with user", e);
        }

        k1Manager.invalidate(k1);

        return userDetails;
    }


    @Override
    protected Authentication createSuccessAuthentication(Authentication authentication, UserDetails user) {
        LnurlAuthWalletToken auth = (LnurlAuthWalletToken) authentication;

        LnurlAuthWalletToken newAuth = new LnurlAuthWalletToken(auth.getAuth(), user, user.getAuthorities());
        newAuth.setDetails(user);

        return newAuth;
    }

    private boolean verifyLogin(SignedLnurlAuth auth) {
        return verifyLogin(auth.getK1(), auth.getSignature(), auth.getLinkingKey());
    }

    private boolean verifyLogin(K1 k1, Signature signature, LinkingKey linkingKey) {
        byte[] rawK1 = k1.toArray();
        ByteVector64 rawSig = Crypto.der2compact(signature.toArray());
        PublicKey rawKey = PublicKey.fromHex(linkingKey.toHex());

        return Crypto.verifySignature(rawK1, rawSig, rawKey);
    }
}
